// dfs for directed graph
fun main() {
    val r = System.`in`.bufferedReader()
    repeat(r.readLine()!!.toInt()) {
    
    val (vertices, edges) = r.readLine()!!.split(" ").map { it.toInt() }

    // Create adjacent List
    val adj = List(vertices) { mutableListOf<Int>() }
    repeat(edges) {
        val (u, v) = r.readLine()!!.split(" ").map { it.toInt() }
        adj[u - 1] += v - 1
        // For undirected graph
        //adj[v - 1] += u - 1
    }
    // Store visited vertices
    val visited = BooleanArray(vertices) { false }

    // Store parent of vertices
    val parent = IntArray(vertices) { -1 }

    // Outside of the function, easier to communicate.
    var canReach = false

    fun dfs(source: Int, des: Int) {
        visited[source] = true
        adj[source].forEach {
            when {
                it == des -> {
                    parent[it] = source
                    canReach = true
                }
                !visited[it] -> {
                    parent[it] = source
                    dfs(it, des)
                }
            }
        }
    }
    dfs(1, 3)
    println(canReach)
}


// Another one, 2020.8.18, they are similar.
fun main() {
    val r = System.`in`.bufferedReader()
    val s1 = StringBuilder()
    val (n, k) = r.readLine()!!.split(" ").map { it.toInt() }
    val adj = List(n) { mutableListOf<Int>() }
    repeat(n - 1) {
        val (a, b) = r.readLine()!!.split(" ").map { it.toInt() - 1 }
        adj[a] += b
        adj[b] += a
    }
    val visited = BooleanArray(n) { false }
    val parent = MutableList(n) { -1 }
    val child = MutableList(n) { 0 }
    val deep = IntArray(n) { 0 }
    fun dfs(u: Int): Int {
        visited[u] = true
        var c = 0
        adj[u].forEach {
            if (!visited[it]) {
                parent[it] = u
                deep[it] = deep[u]+1
                c += dfs(it)
            }
        }
        if (adj[u].size == 1 && parent[u] != -1) {
            child[u] = 0
            return 1
        } else {
            child[u] = c
            return c + 1
        }
    }
    dfs(0)
}
