// dfs for directed graph
fun main() {
    val r = System.`in`.bufferedReader()
    repeat(r.readLine()!!.toInt()) {
    
    val (vertices, edges) = r.readLine()!!.split(" ").map { it.toInt() }

    // Create adjacent List
    val adj = List(vertices) { mutableListOf<Int>() }
    repeat(edges) {
        val (u, v) = r.readLine()!!.split(" ").map { it.toInt() }
        adj[u - 1] += v - 1
        // For undirected graph
        //adj[v - 1] += u - 1
    }
    // Store visited vertices
    val visited = BooleanArray(vertices) { false }

    // Store parent of vertices
    val parent = IntArray(vertices) { -1 }

    // Outside of the function, easier to communicate.
    var canReach = false

    fun dfs(source: Int, des: Int) {
        visited[source] = true
        adj[source].forEach {
            when {
                it == des -> {
                    parent[it] = source
                    canReach = true
                }
                !visited[it] -> {
                    parent[it] = source
                    dfs(it, des)
                }
            }
        }
    }
    dfs(1, 3)
    println(canReach)
}
