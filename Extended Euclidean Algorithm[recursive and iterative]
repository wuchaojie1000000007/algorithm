// Extended Euclidean Algorithm[recursive]
// Return (x, y, g) st ax + by = g (gcd(a, b))
fun gcd(a: Int, b: Int): Triple<Int, Int, Int> {

    // Base case
    if (b == 0) return Triple(1, 0, a)

    val (x1, y1, g) = gcd(b, a % b)
    val x = y1
    val y = x1 - (a / b) * y1
    return Triple(x, y, g)
}

// Extended Euclidean Algorithm[iterative]
// Return (x, y, g) st ax + by = g (gcd(a, b))
// Reason: a * x  + b * y  = a1
//         a * x1 + b * y1 = b1   will not change
//         and a1 will decrease, when a1 = gcd(a, b), return x and y.   
fun gcd(a: Long, b: Long): Triple<Long, Long, Long> {
    var (x, y) = 1L to 0L
    var (x1, y1) = 0L to 1L
    var (a1, b1) = a to b
    while (b1 != 0L) {
        val q = a1 / b1
        x = x1.also { x1 = x - q * x1 }
        y = y1.also { y1 = y - q * y1 }
        a1 = b1.also { b1 = a1 - q * b1 }
    }
    return Triple(x, y, a1)
}

fun main() {
    val r = System.`in`.bufferedReader()
    val sb = StringBuilder()
    println(gcd(6, 4)) // (1, -1, 2)
    println(gcd(6L, 4L)) //(1, -1, 2)
}
