import java.util.*

class BinarySearchTree<T : Comparable<T>> {

    // Track the number of nodes in this BST
    private var nodeCount = 0

    // This BST is rooted tree so we maintain a handle on the root node
    private var root: Node? = null

    // Internal node containing node references and actual node data
    inner class Node(var left: Node?, var right: Node?, var data: T)

    // Check if this binary tree is empty
    fun isEmpty() = size() == 0

    // Get the number of nodes in this binary tree
    fun size() = nodeCount

    // Add an element to this binary tree. Return true if successfully perform an insertion
    fun add(elem: T): Boolean {

        // Check if the value already exists in this binary tree,
        // if it does ignore adding it
        if (contains(elem)) return false

        // Otherwise add this element to the binary tree
        else {
            root = add(root, elem)
            nodeCount++
            return true
        }
    }

    // Private method to recursively add a value in the binary tree
    // Think it as there is only one node, and you want to add another one node
    private fun add(node: Node?, elem: T): Node = when {

        // Base case: found a leaf node
        node == null -> Node(null, null, elem)

        // Pick a subtree to insert element
        elem < node.data -> {
            node.left = add(node.left, elem)
            node
        }
        else -> {
            node.right = add(node.right, elem)
            node
        }
    }

    // Remove a value from this binary tree if it exists, O(n)
    fun remove(elem: T): Boolean {

        // Make sure the node we want to remove exists
        if (contains(elem)) {
            root = remove(root, elem)
            nodeCount--
            return true
        }
        return false
    }

    private fun remove(node: Node?, elem: T): Node? {
        when {
            node == null -> return null

            // Dig into left subtree, the value we're looking for is smaller than the current value
            elem < node.data -> node.left = remove(node.left, elem)

            // Dig into right subtree, the value we're looking for is greater than the current value
            elem > node.data -> node.right = remove(node.right, elem)

            // Now we find the node we wish to remove

            // This is the case with only a right subtree or no subtree at all.
            // In this situation just swap the node we wish to remove with its right child
            node.left == null -> return node.right

            // This is the case with only a left subtree
            // In this situation just swap the node we wish to remove with its left child
            node.right == null -> return node.left

            // When removing a node from a binary tree with two links the
            // successor of the node being removed can either be the largest
            // value in the left subtree or the smallest value in the right subtree.
            // In this implementation I have decided to find the smallest value in the right subtree
            // which can be found by traversing as far left as possible in the right subtree.
            else -> {

                // Find the leftmost node in the right subtree
                val tmp = findMin(node.right!!)

                // Swap the data
                node.data = tmp.data.also { tmp.data = node.data }

                // Go into the right subtree and remove the leftmost node
                // we found and swapped data with. This prevents us from having
                // two nodes in our tree with the same value
                node.right = remove(node.right, tmp.data)

                // If instead we wanted to find the largest node in the left
                // subtree as opposed to smallest node in the right subtree
                // here is what we would do:
                //val tmp = findMax(node.left)
                //node.data = tmp.data.also{tmp.data = node.data}
                //node.left = remove(node.left, tmp.data)
            }
        }
        return node
    }

    // Helper method to find the leftmost node (which has the smallest value)
    private fun findMin(node: Node): Node {
        var n = node
        while (n.left != null) n = n.left!!
        return n
    }

    // Helper method to find the rightmost node (which has the largest value)
    private fun findMax(node: Node): Node {
        var n = node
        while (n.right != null) n = n.right!!
        return n
    }

    // returns true if the element exists in the tree
    fun contains(elem: T) = contains(root, elem)

    // Private recursive method to find an element in the tree
    private fun contains(node: Node?, elem: T): Boolean {

        // Base case: reached bottom, value not found
        if (node == null) return false

        return when {

            // Dig into the left subtree because the value we're
            // looking for is smaller than the current value
            elem < node.data -> contains(node.left, elem)

            // Dig into the right subtree because the value we're
            // looking for is bigger than the current value
            elem > node.data -> contains(node.right, elem)

            // We found the value we are looking for
            else -> true
        }
    }

    // Compute the height of the tree, O(n)
    fun height() = height(root)

    // Recursive helper method to compute the height of the tree
    private fun height(node: Node?): Int = if (node == null) 0
    else 1 + maxOf(height(node.left), height(node.right))

    // This method print tree value in different order,four different ways are:
    // preorder, inorder, postorder, levelorder
    fun traverse(order: TreeTraversalOrder) {
        when (order) {
            TreeTraversalOrder.PRE_ORDER -> preOrderTraversal(root)
            TreeTraversalOrder.IN_ORDER -> inOrderTraversal(root)
            TreeTraversalOrder.POST_ORDER -> postOrderTraversal(root)
            TreeTraversalOrder.LEVEL_ORDER -> levelOrderTraversal(root)

        }
    }

    private fun preOrderTraversal(node: Node?) {
        when (node) {
            null -> return
            else -> {
                print("${node.data} ")
                preOrderTraversal(node.left)
                preOrderTraversal(node.right)
            }
        }
    }

    private fun inOrderTraversal(node: Node?) {
        when (node) {
            null -> return
            else -> {
                inOrderTraversal(node.left)
                print("${node.data} ")
                inOrderTraversal(node.right)
            }
        }
    }

    private fun postOrderTraversal(node: Node?) {
        when (node) {
            null -> return
            else -> {
                postOrderTraversal(node.left)
                postOrderTraversal(node.right)
                print("${node.data} ")
            }
        }
    }

    private fun levelOrderTraversal(node: Node?) {

        if (node == null) return
        else {
            var expectedNodeCount = nodeCount

            val queue: Queue<Node> = LinkedList()
            queue.offer(node)

            val sb = StringBuilder()

            while (queue.isNotEmpty()) {
                val node = queue.poll()!!
                sb.append("${node.data} ")
                if (node.left != null) queue.offer(node.left)
                if (node.right != null) queue.offer(node.right)
            }
            print(sb)
        }
    }

    enum class TreeTraversalOrder {
        PRE_ORDER, IN_ORDER, POST_ORDER, LEVEL_ORDER
    }
}
